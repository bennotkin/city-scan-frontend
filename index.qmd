---
title: "Gagarin City Scan Test"
format:
  html:
    theme: [custom.scss, none]
editor: source
execute:
  echo: false
  output: false
---

::: setup
{{< include scrollytelling.qmd >}}

```{r}
#| include: false
# Read functions & packages
# Only the github version of leaflet supports terra, in place of raster, which is now required as sp (on which raster depends) is being deprecated
# devtools::install_github('rstudio/leaflet')
source("fns.R")

# City parameters
city_params <- read_yaml("city_inputs.yml")
# cities <- list.files("cities")
city <- city_params$city_name
city_string <- tolower(city) %>% stringr::str_replace_all(" ", "-")
city_dir <- paste0("cities/", city_string, "/")
output_dir <- paste0(city_dir, "styled-maps/")
# raster_dir <- paste0(city_dir, "/output")
country <- city_params$country

# Visualization parameters
basemap_opacity <- 0.3
legend_opacity <- 0.8
vwidth <- 900
vheight <- vwidth

# this is to enable fractional zoom in mapshot
useragent <- 'Mozilla/5.0 (compatible; MSIE 10.6; Windows NT 6.1; Trident/5.0; InfoPath.2; SLCC1; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 2.0.50727) 3gpp-gba UNTRUSTED/1.0'

# Layers
layer_params <- read_yaml('layers.yml')
```

```{r}
# Get text
city_text <- read_md("text-files/manual-text.md")
generic_text <- read_yaml("text-files/generic-text.yml")
slide_texts <- merge_lists(city_text, generic_text)
```

```{r}
#| include: false

# Define the AOI
aoi <- st_read(paste0(city_dir, "AOI"))
aoi_bounds <- st_bbox(aoi)

# Inititate the map here, will build on it in each "slide"
all_maps <- plot_basemap("vector")

# Keep track of added layers
added_layers <- c()
```
:::

::: topbar
# {{< meta title >}}

::: navigation
```{r}
#| output: asis
# Dynamically add sections to table of contents ... there's probably a better way?
sections <- readLines("/Users/bennotkin/Documents/world-bank/crp/city-scans/city-scan-automation/frontend/city-scan-html-sample/index.qmd") %>%
  subset(str_detect(., "^##")) %>% str_replace("# ", "- ") %>% str_replace_all("#", "  ")

anchors <- sections %>% str_extract("^\\s*- (.*$)", group = T) %>% tolower() %>% str_replace_all(c("[^a-z\\s]" = "", "\\s+" = "-")) %>%
  str_replace("(.*)", "(#\\1)")

paste0(str_replace(sections, "(^\\s*- )(.+$)", "\\1[\\2]"), anchors) %>% { cat("- <span id='dynamic-header'>City Scan</span>  &or;", ., sep = "\n") }
```

[Inputs version](https://bennotkin.quarto.pub/gagarin-city-scan-form/)
:::
:::

::: text-column
# {{< meta title >}}

## Setting the Context

### Basic City Information

```{r}
# Add a map layer? But it's just the AOI
```

```{r}
#| output: asis
print_slide_text(slide_texts$setting_the_context$basic_city_info)
```

<!-- ### The State of Urban Infrastructure and Service Delivery -->

<!-- ```{r} -->
<!-- #| output: asis -->
<!-- print_slide_text(slide_texts$setting_the_context$infrastructure_and_service_delivery) -->
<!-- ``` -->

## Population and Demographic Trends

### Population Growth

<!-- ![](images/oxford-pop-growth.png) -->
```{r, output=TRUE}
# saveRDS(pop_growth_plot, "plots/pop-growth.rds")
ggplotly(readRDS("plots/pop-growth.rds"))
```

```{r}
#| output: asis
print_slide_text(slide_texts$demographics$population_growth)
```

### Population Density (chart)

<!-- ![](images/oxford-pop-density-scatter.png) -->
```{r, output=TRUE}
# saveRDS(density_plot, "plots/density.rds")
ggplotly(readRDS("plots/density.rds") + labs(y = "People per square kilometer"))
```

```{r}
#| output: asis
print_slide_text(slide_texts$demographics$population_density_chart)
```

### Population Distribution by Age & Sex

<!-- ![](images/world-pop-age-sex.png) -->
```{r, output=TRUE}
# saveRDS(pop_age_sex_plot, "plots/age-sex-distribution.rds")
ggplotly(readRDS("plots/age-sex-distribution.rds"))
```

```{r}
#| output: asis
print_slide_text(slide_texts$demographics$population_distribution_age_sex)
```

### Population Density

```{r}
#| include: false
# Read population data
pop <- fuzzy_read(city_dir, "population")
add_pop_layer <- create_layer_function(data = pop, yaml_key = "population")

all_maps <- add_pop_layer(all_maps)
  # This could be put into the add_*_layer() functions themselves
  # hideGroup("population-density")
added_layers <- c(added_layers, "population-density")
```

```{r}
#| output: asis
print_slide_text(slide_texts$demographics$population_density)
```

### Relative Wealth Index

```{r}
#| include: false
# Read RWI
rwi <-
  st_read(paste0(city_dir, "output/relative_wealth_index"), quiet = T) %>%
  select(values = rwi, long = longitude, lat = latitude)

# # Using terra intead of sf for consistency
# # Except this doesn't work well because there are multiple value columns so it gets complicated to use programmatically 
# rwi <- vect(paste0(city_dir, "output/relative_wealth_index"))

# rwi_range <- max(c(abs(min(rwi$values)), max(rwi$values))) %>% {c(-., 0, .)}

# rwi_color_scale <- colorNumeric(
#   palette = colorRamp(
#     c('#ED431B', '#FF9169', '#FFFFBA', '#70C5AD', '#009E7A'),
#     interpolate = 'linear'),
#   domain = NULL,
#   na.color = 'transparent')
# 
# add_rwi_layer <- function(map) {
#   map %>% addPolygons(
#     data = rwi,
#     fillColor = ~ rwi_color_scale(values),
#     fillOpacity = 1,
#     stroke = F,
#     group = "rwi",
#     label = ~ values) %>%
#     addLegend(
#       'bottomright',
#       pal = rwi_color_scale,
#       values = c(min(rwi$values, na.rm = T), max(rwi$values, na.rm = T)),
#       opacity = legend_opacity,
#       # bins = 3,  # legend color ramp does not render if there are too many bins
#       title = layer_params$rwi$title,
#       labFormat = labelFormat(),
#       group = "rwi",
#       # Adding classname because hideGroup() doesn't hide legend; see workaround
#       # here: https://github.com/rstudio/leaflet/issues/477#issuecomment-678542769
#       className = "info legend rwi"
#       )
# }
# 
# plot_basemap() %>% add_rwi_layer() %>%
#    htmlwidgets::onRender("
#       function(el, x) {
#          var updateLegend = function () {
#             var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
# 
#             document.querySelectorAll('.legend').forEach(a => a.hidden=true);
#             document.querySelectorAll('.legend').forEach(l => {
#                if (l.classList.contains(selectedGroup)) l.hidden=false;
#             });
#          };
#          updateLegend();
#          this.on('overlayremove', el => updateLegend());
#       }") %>%
#   hideGroup("rwi")

add_rwi_layer <- create_layer_function(
  data = rwi, yaml_key = "rwi",
  labFormat = labelFormat(digits = 1))

all_maps <- add_rwi_layer(all_maps)
  # This could be put into the add_*_layer() functions themselves
  # hideGroup("relative-wealth-index")
added_layers <- c(added_layers, layer_params[["rwi"]]$group)
```

```{r}
#| output: asis
print_slide_text(slide_texts$demographics$relative_wealth)
```

## Economic Activity

### Economic Hotspots

```{r}
economic_activity <- fuzzy_read(city_dir, "avg_rad_sum")

add_economic_activity_layer <- create_layer_function(
  data = economic_activity, yaml_key = "economic-activity",
  labFormat = labelFormat(digits = 2))
all_maps <- add_economic_activity_layer(all_maps)
added_layers <- c(added_layers, layer_params[["economic-activity"]]$group)
```

```{r}
#| output: asis
print_slide_text(slide_texts$economic_activity$economic_hotspots)
```

### Change in Economic Hotspots

```{r}
economic_change <- fuzzy_read(city_dir, "linfit")
add_economic_change_layer <- create_layer_function(data = economic_change, yaml_key = "economic-change")
all_maps <- add_economic_change_layer(all_maps)
added_layers <- c(added_layers, layer_params[["economic-change"]]$group)
```

```{r}
#| output: asis
print_slide_text(slide_texts$economic_activity$economic_change)
```

## Built Form

### Urban Extent and Change

```{r}
wsf <- fuzzy_read(city_dir, "WSF.*4326")
values(wsf)[values(wsf) == 0] <- NA
add_wsf_layer <- create_layer_function(data = wsf, yaml_key = "wsf")
all_maps <- add_wsf_layer(all_maps)
added_layers <- c(added_layers, layer_params[["wsf"]]$group)
```

```{r}
#| output: asis
print_slide_text(slide_texts$built_form$wsf)
```

<!-- ### Land Cover -->

```{r}
# lc <- fuzzy_read(city_dir, "landcover")

#   lc_values <- c(
#     # 'No data' = 0,
#     'Tree cover' = 10,
#     'Shrubland' = 20,
#     'Grassland' = 30,
#     'Cropland' = 40,
#     'Built-up' = 50,
#     'Bare/sparse vegetation' = 60,
#     'Snow and ice' = 70,
#     'Permanent water bodies' = 80,
#     'Herbaceous wetland' = 90,
#     'Mangroves' = 95)
#   lc_colors <- colorFactor(
#     palette = c(
#       '0'  = 'transparent', # 'No data'
#       '10' = '#277242', # 'Tree cover'
#       '20' = '#DEBA59', # 'Shrubland'
#       '30' = '#79A54F', # 'Grassland'
#       '40' = '#E88B39', # 'Cropland'
#       '50' = '#C62421', # 'Built-up'
#       '60' = '#9C9085', # 'Bare/sparse vegetation'
#       '70' = '#DDDDDD', # 'Snow and ice'
#       '80' = '#2491D7', # 'Permanent water bodies'
#       '90' = '#707CBA', # 'Herbaceous wetland'
#       '95' = '#00C86E', # 'Mangroves'
#       '100' = '#f6e8a1' # 'Moss and Lichen'),
#     levels = c(10*0:9, 95),
#     na.color = '#00000000')

# add_lc_layer <- create_layer_function(data = lc, yaml_key = "lc", color_scale = lc_colors)
# add_lc_layer(all_maps)
```
:::

::: maps
```{r}
#| output: true
all_maps %>%
  add_aoi() %>%
  addLayersControl(
    overlayGroups = added_layers,
    options = layersControlOptions(collapsed = FALSE))

  # If I want to use javascript directly I could use htmlwidgets::onRender(),
  # or maybe just an observable cell
```
:::
